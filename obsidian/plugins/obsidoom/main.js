/*
THIS IS A GENERATED/BUNDLED FILE BY ESBUILD
if you want to view the source, please visit the github repository of this plugin
*/

var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __commonJS = (cb, mod) => function __require() {
  return mod || (0, cb[__getOwnPropNames(cb)[0]])((mod = { exports: {} }).exports, mod), mod.exports;
};
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);

// GAME_URLS.json
var require_GAME_URLS = __commonJS({
  "GAME_URLS.json"(exports, module2) {
    module2.exports = {
      DOOM: "https://dos.zone/player/?bundleUrl=https%3A%2F%2Fcdn.dos.zone%2Fcustom%2Fdos%2Fdoom.jsdos?anonymous=1",
      "PRINCE OF PERSIA": "https://dos.zone/player/?bundleUrl=https%3A%2F%2Fcdn.dos.zone%2Foriginal%2F2X%2F1%2F1179a7c9e05b1679333ed6db08e7884f6e86c155.jsdos?anonymous=1",
      "MORTAL COMBAT": "https://dos.zone/player/?bundleUrl=https%3A%2F%2Fcdn.dos.zone%2Foriginal%2F2X%2F8%2F872f3668c36085d0b1ace46872145285364ee628.jsdos?anonymous=1",
      GTA: "https://dos.zone/player/?bundleUrl=https%3A%2F%2Fcdn.dos.zone%2Fcustom%2Fdos%2Fgta-mobile.jsdos?anonymous=1",
      "SIM CITY": "https://dos.zone/player/?bundleUrl=https%3A%2F%2Fcdn.dos.zone%2Foriginal%2F2X%2F7%2F744842062905f72648a4d492ccc2526d039b3702.jsdos?anonymous=1",
      "NEED FOR SPEED": "https://dos.zone/player/?bundleUrl=https%3A%2F%2Fcdn.dos.zone%2Fcustom%2Fdos%2Fnfs.jsdos?anonymous=1"
    };
  }
});

// src/main.ts
var main_exports = {};
__export(main_exports, {
  default: () => ObsiDOOM
});
module.exports = __toCommonJS(main_exports);
var import_obsidian2 = require("obsidian");

// src/SidePanel.ts
var import_obsidian = require("obsidian");
var SIDE_PANEL_ID = "ObsiDOOM Side Panel";
var GAME_URLS = require_GAME_URLS();
var SidePanel = class extends import_obsidian.ItemView {
  constructor(leaf) {
    super(leaf);
    this.endGameButton = document.createElement("button");
    this.openGameButton = document.createElement("button");
    this.gameDiv = document.createElement("div");
    this.dropDownDiv = document.createElement("div");
    this.endGameButton = document.createElement("button");
    this.endGameButton.addClass("doom-button");
    this.endGameButton.setText("Close Game");
    this.endGameButton.onClickEvent(() => {
      this.disableButton(this.endGameButton);
      this.gameDiv.children[0].remove();
      this.enableButton(this.openGameButton);
    });
    this.openGameButton = document.createElement("button");
    this.openGameButton.addClass("doom-button");
    this.openGameButton.setText("Open Game");
    this.openGameButton.onClickEvent(() => {
      this.disableButton(this.openGameButton);
      this.gameDiv.appendChild(this.generateGameIFrame());
      this.enableButton(this.endGameButton);
    });
    this.dropDownDiv.addClass("doom-dropdown");
    const label = document.createElement("label");
    label.setText("Select Game:");
    const select = document.createElement("select");
    select.id = "game-select";
    select.name = "game-select";
    for (const game in GAME_URLS) {
      const option = document.createElement("option");
      option.value = game;
      option.text = game;
      select.appendChild(option);
    }
    select.onchange = (_) => {
      console.debug(`[ObsiDOOM] Selected game: ${select.value}`);
      this.gameDiv.children[0].remove();
      this.disableButton(this.openGameButton);
      this.gameDiv.appendChild(this.generateGameIFrame(select.value));
      this.enableButton(this.endGameButton);
    };
    this.dropDownDiv.appendChild(label);
    this.dropDownDiv.appendChild(select);
  }
  static async activate(workspace) {
    workspace.detachLeavesOfType(SIDE_PANEL_ID);
    await workspace.getRightLeaf(false).setViewState({
      type: SIDE_PANEL_ID,
      active: true
    });
    workspace.revealLeaf(workspace.getLeavesOfType(SIDE_PANEL_ID)[0]);
  }
  getViewType() {
    return SIDE_PANEL_ID;
  }
  getDisplayText() {
    return "ObsiDOOM";
  }
  getIcon() {
    return "swords";
  }
  async onOpen() {
    console.log("Opened ObsiDOOM Side Panel");
    const container = this.contentEl;
    const header = document.createElement("h3");
    header.textContent = "DOOM";
    header.addClass("doom-header");
    container.appendChild(header);
    container.appendChild(this.dropDownDiv);
    container.appendChild(this.gameDiv);
    this.gameDiv.appendChild(this.generateGameIFrame());
    this.disableButton(this.openGameButton);
    container.appendChild(this.openGameButton);
    this.enableButton(this.endGameButton);
    container.appendChild(this.endGameButton);
  }
  disableButton(button) {
    if (!button.hasClass("doom-button-disabled"))
      button.addClass("doom-button-disabled");
    button.disabled = true;
  }
  enableButton(button) {
    if (button.hasClass("doom-button-disabled"))
      button.removeClass("doom-button-disabled");
    button.disabled = false;
  }
  generateGameIFrame(gameName = "DOOM") {
    const gameIFrame = document.createElement("iframe");
    gameIFrame.id = "gameIFrame";
    gameIFrame.setAttr("src", GAME_URLS[gameName]);
    gameIFrame.toggleAttribute("allowfullscreen");
    return gameIFrame;
  }
};

// src/main.ts
var ObsiDOOM = class extends import_obsidian2.Plugin {
  async onload() {
    this.registerView(SIDE_PANEL_ID, (leaf) => new SidePanel(leaf));
    await SidePanel.activate(this.app.workspace);
  }
};
